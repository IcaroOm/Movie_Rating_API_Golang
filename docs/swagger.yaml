basePath: /api
definitions:
  gorm.DeletedAt:
    properties:
      time:
        type: string
      valid:
        description: Valid is true if Time is not NULL
        type: boolean
    type: object
  internal_auth.CreateUserRequest:
    properties:
      password:
        minLength: 6
        type: string
      username:
        maxLength: 50
        minLength: 3
        type: string
    required:
    - password
    - username
    type: object
  internal_handlers.CreateMovieRequest:
    properties:
      actor_ids:
        items:
          type: integer
        type: array
      budget:
        type: integer
      country_id:
        type: integer
      director_ids:
        items:
          type: integer
        type: array
      genre_ids:
        items:
          type: integer
        type: array
      gross:
        type: integer
      language_ids:
        items:
          type: integer
        type: array
      plot:
        type: string
      runtime:
        type: integer
      tagline:
        type: string
      title:
        type: string
      writer_ids:
        items:
          type: integer
        type: array
      year:
        type: integer
    required:
    - title
    - year
    type: object
  internal_handlers.CreateReviewRequest:
    properties:
      movie_id:
        type: integer
      text:
        type: string
      user_rating:
        type: integer
    required:
    - movie_id
    - text
    type: object
  internal_handlers.MovieDetailResponse:
    properties:
      average_rating:
        type: number
      description:
        type: string
      id:
        type: integer
      release_date:
        type: string
      title:
        type: string
    type: object
  internal_handlers.MovieResponse:
    properties:
      average_rating:
        type: number
      description:
        type: string
      id:
        type: integer
      title:
        type: string
    type: object
  internal_handlers.ReviewResponse:
    properties:
      id:
        type: integer
      movie_title:
        type: string
      text:
        type: string
      user_name:
        type: string
      user_rating:
        type: integer
    type: object
  movie-api_internal_models.Country:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      name:
        type: string
      updatedAt:
        type: string
    type: object
  movie-api_internal_models.ErrorResponse:
    properties:
      error:
        example: error message
        type: string
    type: object
  movie-api_internal_models.Genre:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      name:
        type: string
      updatedAt:
        type: string
    type: object
  movie-api_internal_models.Language:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      name:
        type: string
      updatedAt:
        type: string
    type: object
  movie-api_internal_models.LoginRequest:
    properties:
      password:
        example: senha123
        type: string
      username:
        example: admin
        type: string
    type: object
  movie-api_internal_models.Movie:
    properties:
      actors:
        items:
          $ref: '#/definitions/movie-api_internal_models.Person'
        type: array
      budget:
        type: integer
      country:
        $ref: '#/definitions/movie-api_internal_models.Country'
      countryID:
        type: integer
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      description:
        type: string
      directors:
        items:
          $ref: '#/definitions/movie-api_internal_models.Person'
        type: array
      genres:
        items:
          $ref: '#/definitions/movie-api_internal_models.Genre'
        type: array
      gross:
        type: integer
      id:
        type: integer
      languages:
        items:
          $ref: '#/definitions/movie-api_internal_models.Language'
        type: array
      metascore:
        type: integer
      rating:
        type: number
      roles:
        items:
          $ref: '#/definitions/movie-api_internal_models.Role'
        type: array
      runtime:
        type: integer
      tagline:
        type: string
      title:
        type: string
      updatedAt:
        type: string
      votes:
        type: integer
      writers:
        items:
          $ref: '#/definitions/movie-api_internal_models.Person'
        type: array
      year:
        type: integer
    type: object
  movie-api_internal_models.Person:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      name:
        type: string
      updatedAt:
        type: string
    type: object
  movie-api_internal_models.Review:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      movie:
        $ref: '#/definitions/movie-api_internal_models.Movie'
      movieID:
        type: integer
      rating:
        type: number
      text:
        type: string
      updatedAt:
        type: string
      user:
        $ref: '#/definitions/movie-api_internal_models.User'
      userID:
        type: integer
    type: object
  movie-api_internal_models.Role:
    properties:
      actor:
        $ref: '#/definitions/movie-api_internal_models.Person'
      character:
        type: string
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      movie:
        $ref: '#/definitions/movie-api_internal_models.Movie'
      movieID:
        type: integer
      personID:
        type: integer
      updatedAt:
        type: string
    type: object
  movie-api_internal_models.TokenResponse:
    properties:
      token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
    type: object
  movie-api_internal_models.User:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      password:
        type: string
      token:
        type: string
      updatedAt:
        type: string
      username:
        type: string
    type: object
host: 127.0.0.1:8000
info:
  contact:
    email: support@movieapi.com
    name: API Support
  description: This is a sample movie rating and review API
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Movie API
  version: "1.0"
paths:
  /movies:
    get:
      description: Get all movies with average ratings
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/internal_handlers.MovieResponse'
            type: array
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get list of movies
      tags:
      - movies
    post:
      consumes:
      - application/json
      description: Create movie with relationships
      parameters:
      - description: Movie data
        in: body
        name: movie
        required: true
        schema:
          $ref: '#/definitions/internal_handlers.CreateMovieRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/movie-api_internal_models.Movie'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/movie-api_internal_models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/movie-api_internal_models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/movie-api_internal_models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new movie
      tags:
      - movies
  /movies/{id}:
    get:
      description: Get detailed information about a specific movie
      parameters:
      - description: Movie ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/internal_handlers.MovieDetailResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get movie details
      tags:
      - movies
  /reviews:
    get:
      description: Get a list of all reviews with user and movie information.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/internal_handlers.ReviewResponse'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/movie-api_internal_models.ErrorResponse'
      summary: Get all reviews
      tags:
      - review
    post:
      consumes:
      - application/json
      description: Create review
      parameters:
      - description: Review data
        in: body
        name: movie
        required: true
        schema:
          $ref: '#/definitions/internal_handlers.CreateReviewRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/movie-api_internal_models.Review'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/movie-api_internal_models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/movie-api_internal_models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/movie-api_internal_models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new review
      tags:
      - review
  /reviews/{id}:
    get:
      description: Get details of a specific review by its ID.
      parameters:
      - description: Review ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/internal_handlers.ReviewResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/movie-api_internal_models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/movie-api_internal_models.ErrorResponse'
      summary: Get review details by ID
      tags:
      - review
  /token:
    post:
      consumes:
      - application/json
      description: Authenticate user and get JWT token
      parameters:
      - description: User credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/movie-api_internal_models.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/movie-api_internal_models.TokenResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/movie-api_internal_models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/movie-api_internal_models.ErrorResponse'
      summary: User login
      tags:
      - authentication
  /users:
    post:
      consumes:
      - application/json
      description: Create a user account
      parameters:
      - description: User credentials
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/internal_auth.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/movie-api_internal_models.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/movie-api_internal_models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/movie-api_internal_models.ErrorResponse'
      summary: Register new user
      tags:
      - users
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
